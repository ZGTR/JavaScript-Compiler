/* Generated By:JavaCC: Do not edit this line. JSParser.java */
package js_compiler;
import java.util.ArrayList;
import js_compiler.JS_COMPILERGrammar .* ;
 import java.util.HashMap;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
public class JSParser implements JSParserConstants {
        public static HashMap<String, VarValue> Vars_Table;
        public static void main(String args[]) throws ParseException, FileNotFoundException  {
                 Vars_Table = new HashMap<String, VarValue>();
                 JSParser rzCompiler = new JSParser (new DataInputStream(new BufferedInputStream(new FileInputStream("Z:\\test.txt"))));
                 TreeNode treeNodeBase = rzCompiler.start();
                 System.out.println("HELLOZ - Done parsing successfully :P");
                for(TreeNode child : treeNodeBase.childs)
                {
                        child.Execute();
                }
         }

  static final public TreeNode start() throws ParseException {
        TreeNode baseTreeNode = new BlockNode();
        TreeNode block = null;
    block = Block();
                        baseTreeNode.addChild(block);
    jj_consume_token(0);
         {if (true) return baseTreeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockNode Block() throws ParseException {
        BlockNode blockBaseNode = new BlockNode();
        TreeNode statement = null;
    label_1:
    while (true) {
      statement = Statement();
                                   blockBaseNode.addChild(statement);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INCR:
      case DECR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
         {if (true) return blockBaseNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Statement() throws ParseException {
  TreeNode statement = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
    case IDENTIFIER:
      statement = Assignment();
      break;
    case IF:
      statement = IfStatement();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public void PrimaryExpression() throws ParseException {
    if (jj_2_1(2147483647)) {
      jj_consume_token(THIS);
    } else if (jj_2_2(2147483647)) {
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } else if (jj_2_3(2147483647)) {
      jj_consume_token(IDENTIFIER);
    } else if (jj_2_4(2)) {
      Literal();
    } else if (jj_2_5(2147483647)) {
      AllocationExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 7.8: Literals */
  static final public void Literal() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identifier() throws ParseException {
          Token t;
    t = jj_consume_token(IDENTIFIER);
  }

        /* Section 11.2: Left-Hand-Side Expressions */
  static final public void MemberExpression() throws ParseException {
    if (jj_2_6(2147483647)) {
      FunctionExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case THIS:
      case LPAREN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        PrimaryExpression();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_2;
      }
      MemberExpressionPart();
    }
  }

  static final public void MemberExpressionForIn() throws ParseException {
    if (jj_2_8(2147483647)) {
      FunctionExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case THIS:
      case LPAREN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        PrimaryExpression();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_3;
      }
      MemberExpressionPart();
    }
  }

  static final public void AllocationExpression() throws ParseException {
    jj_consume_token(NEW);
    MemberExpression();
    label_4:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_4;
      }
      Arguments();
      label_5:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_5;
        }
        MemberExpressionPart();
      }
    }
  }

  static final public void MemberExpressionPart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
      break;
    case DOT:
      jj_consume_token(DOT);
      Identifier();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CallExpression() throws ParseException {
    MemberExpression();
    Arguments();
    label_6:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_6;
      }
      CallExpressionPart();
    }
  }

  static final public void CallExpressionForIn() throws ParseException {
    MemberExpressionForIn();
    Arguments();
    label_7:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_7;
      }
      CallExpressionPart();
    }
  }

  static final public void CallExpressionPart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Arguments();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
      break;
    case DOT:
      jj_consume_token(DOT);
      Identifier();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FUNCTION:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case IDENTIFIER:
      ArgumentList();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  static final public void ArgumentList() throws ParseException {
    AssignmentExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      AssignmentExpression();
    }
  }

  static final public void LeftHandSideExpression() throws ParseException {
    if (jj_2_14(2147483647)) {
      CallExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case NEW:
      case THIS:
      case LPAREN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        MemberExpression();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void LeftHandSideExpressionForIn() throws ParseException {
    if (jj_2_15(2147483647)) {
      CallExpressionForIn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case NEW:
      case THIS:
      case LPAREN:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        MemberExpressionForIn();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

        /* Section 11.3 Postfix Expressions */
  static final public void PostfixExpression() throws ParseException {
    LeftHandSideExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      PostfixOperator();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void PostfixOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.4 Unary Operators */
  static final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case NEW:
    case THIS:
    case LPAREN:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case IDENTIFIER:
      PostfixExpression();
      break;
    case DELETE:
    case TYPEOF:
    case VOID:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      label_9:
      while (true) {
        UnaryOperator();
        UnaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case TYPEOF:
        case VOID:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case TYPEOF:
      jj_consume_token(TYPEOF);
      break;
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.5: Multiplicative Operators */
  static final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      MultiplicativeOperator();
      UnaryExpression();
    }
  }

  static final public void MultiplicativeOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.6: Additive Operators */
  static final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      AdditiveOperator();
      MultiplicativeExpression();
    }
  }

  static final public void AdditiveOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.7: Bitwise Shift Operators */
  static final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
      case LSHIFT:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      ShiftOperator();
      AdditiveExpression();
    }
  }

  static final public void ShiftOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
      break;
    case RSIGNEDSHIFT:
      jj_consume_token(RSIGNEDSHIFT);
      break;
    case RUNSIGNEDSHIFT:
      jj_consume_token(RUNSIGNEDSHIFT);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.4: Relational Operators */
  static final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      RelationalOperator();
      ShiftExpression();
    }
  }

  static final public void RelationalOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      break;
    case IN:
      jj_consume_token(IN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void RelationalExpressionNoIn() throws ParseException {
    ShiftExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_14;
      }
      RelationalNoInOperator();
      ShiftExpression();
    }
  }

  static final public void RelationalNoInOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.9: Equality Operators */
  static final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case 140:
      case 141:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
      EqualityOperator();
      RelationalExpression();
    }
  }

  static final public void EqualityExpressionNoIn() throws ParseException {
    RelationalExpressionNoIn();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case 140:
      case 141:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_16;
      }
      EqualityOperator();
      RelationalExpressionNoIn();
    }
  }

  static final public void EqualityOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case 140:
      jj_consume_token(140);
      break;
    case 141:
      jj_consume_token(141);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.10: Binary Bitwise Operators */
  static final public void BitwiseANDExpression() throws ParseException {
    EqualityExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_17;
      }
      BitwiseANDOperator();
      EqualityExpression();
    }
  }

  static final public void BitwiseANDExpressionNoIn() throws ParseException {
    EqualityExpressionNoIn();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_18;
      }
      BitwiseANDOperator();
      EqualityExpressionNoIn();
    }
  }

  static final public void BitwiseANDOperator() throws ParseException {
    jj_consume_token(BIT_AND);
  }

  static final public void BitwiseXORExpression() throws ParseException {
    BitwiseANDExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_19;
      }
      BitwiseXOROperator();
      BitwiseANDExpression();
    }
  }

  static final public void BitwiseXORExpressionNoIn() throws ParseException {
    BitwiseANDExpressionNoIn();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_20;
      }
      BitwiseXOROperator();
      BitwiseANDExpressionNoIn();
    }
  }

  static final public void BitwiseXOROperator() throws ParseException {
    jj_consume_token(XOR);
  }

  static final public void BitwiseORExpression() throws ParseException {
    BitwiseXORExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_21;
      }
      BitwiseOROperator();
      BitwiseXORExpression();
    }
  }

  static final public void BitwiseORExpressionNoIn() throws ParseException {
    BitwiseXORExpressionNoIn();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_22;
      }
      BitwiseOROperator();
      BitwiseXORExpressionNoIn();
    }
  }

  static final public void BitwiseOROperator() throws ParseException {
    jj_consume_token(BIT_OR);
  }

        /* Section 11.11: Binary Logical Operators */
  static final public void LogicalANDExpression() throws ParseException {
    BitwiseORExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_23;
      }
      LogicalANDOperator();
      BitwiseORExpression();
    }
  }

  static final public void LogicalANDExpressionNoIn() throws ParseException {
    BitwiseORExpressionNoIn();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_24;
      }
      LogicalANDOperator();
      BitwiseORExpressionNoIn();
    }
  }

  static final public void LogicalANDOperator() throws ParseException {
    jj_consume_token(AND);
  }

  static final public void LogicalORExpression() throws ParseException {
    LogicalANDExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_25;
      }
      LogicalOROperator();
      LogicalANDExpression();
    }
  }

  static final public void LogicalORExpressionNoIn() throws ParseException {
    LogicalANDExpressionNoIn();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_26;
      }
      LogicalOROperator();
      LogicalANDExpressionNoIn();
    }
  }

  static final public void LogicalOROperator() throws ParseException {
    jj_consume_token(OR);
  }

        /* Section 11.12: Conditional Operator */
  static final public void ConditionalExpression() throws ParseException {
    LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      AssignmentExpression();
      jj_consume_token(COLON);
      AssignmentExpression();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  static final public void ConditionalExpressionNoIn() throws ParseException {
    LogicalORExpressionNoIn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      AssignmentExpression();
      jj_consume_token(COLON);
      AssignmentExpressionNoIn();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

        /* Section 11.13: Assignment Operators */
  static final public void AssignmentExpression() throws ParseException {
    if (jj_2_16(2147483647)) {
      LeftHandSideExpression();
      AssignmentOperator();
      AssignmentExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        ConditionalExpression();
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void AssignmentExpressionNoIn() throws ParseException {
    if (jj_2_17(2147483647)) {
      LeftHandSideExpression();
      AssignmentOperator();
      AssignmentExpressionNoIn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case IDENTIFIER:
        ConditionalExpressionNoIn();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN_ALL:
      jj_consume_token(ASSIGN_ALL);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Section 11.14: Comma Operator */
  static final public void Expression() throws ParseException {
    AssignmentExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      AssignmentExpression();
    }
  }

  static final public void ExpressionNoIn() throws ParseException {
    AssignmentExpressionNoIn();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      AssignmentExpressionNoIn();
    }
  }

/* ****Rawan's EXP Edit 31-12-2012 ************/
  static final public ExpNode BaExp() throws ParseException {
 ExpNode right=null;ExpNode left=null;Token S=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case String_S:
      S = jj_consume_token(String_S);
      break;
    case LPAREN:
    case NUMBERS:
      right = BoExp();
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      left = BaExp();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
     if((S==null)&&(right!=null))
     {
             if((left!=null))
                {if (true) return new ExpNode(right,left,"double","+");}
            else {if (true) return new ConstantNode("double",right.Execute().toString());}
         }
         if(S!=null)
     {   ConstantNode C_N=new ConstantNode("string",S.image);
             if((left!=null))
                {if (true) return new ExpNode(C_N,left,"double","+");}
            else {if (true) return C_N;}
         }
    throw new Error("Missing return statement in function");
  }

  static final public ExpNode BoExp() throws ParseException {
 ExpNode right=null; ExpNode left=null; Token op=null;
    right = Exp2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      left = BoExp();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
     if(left!=null)
        {if (true) return new ExpNode(right,left,"double",op.image);}
    else {if (true) return new ConstantNode("double",right.Execute().toString());}
    throw new Error("Missing return statement in function");
  }

  static final public ExpNode Exp2() throws ParseException {
 ExpNode right=null;ExpNode left=null;Token op=null;
    right = Number();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case SLASH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        op = jj_consume_token(STAR);
        left = Exp2();
        break;
      case SLASH:
        op = jj_consume_token(SLASH);
        left = Exp2();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
     if(left!=null)
        {if (true) return new ExpNode(right,left,"double",op.image);}
    else {if (true) return new ConstantNode("double",right.Execute().toString());}
    throw new Error("Missing return statement in function");
  }

  static final public ExpNode Number() throws ParseException {
  Token num;ExpNode exp=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBERS:
      num = jj_consume_token(NUMBERS);
                  exp= new ConstantNode("double",num.image);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = BoExp();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/*Boolean Exprision */
  static final public BoolExpNode BooleanExpression() throws ParseException {
        ExpNode Right=null,Left=null;
        Token Op=null;
        Token Var1=null;
        Token Var2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case String_S:
    case NUMBERS:
      Right = BaExp();
      break;
    case IDENTIFIER:
      Var1 = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case GT:
    case LT:
    case LE:
    case GE:
    case EQ:
    case NE:
    case String_S:
    case NUMBERS:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
      case EQ:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GE:
          Op = jj_consume_token(GE);
          break;
        case LE:
          Op = jj_consume_token(LE);
          break;
        case GT:
          Op = jj_consume_token(GT);
          break;
        case LT:
          Op = jj_consume_token(LT);
          break;
        case EQ:
          Op = jj_consume_token(EQ);
          break;
        case NE:
          Op = jj_consume_token(NE);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Var2 = jj_consume_token(NUMBERS);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
      case String_S:
      case NUMBERS:
        Left = BaExp();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  if((Var1==null)&&(Var2==null))
  {if (true) return new BoolExpNode(Right,Left,Op.image);}
  else
        if(Var1==null)
        {
         VariableNode VN=new VariableNode(Var2.toString(),Vars_Table.get(Var2.toString()));
        {if (true) return new BoolExpNode(Left,VN,Op.image);}
        }
         else
        if(Var2==null)
        {
         VariableNode VN=new VariableNode(Var1.toString(),Vars_Table.get(Var1.toString()));
        {if (true) return new BoolExpNode(VN,Right,Op.image);}
        }
         else
        if((Var1!=null)&&(Var2!=null))
        {
         VariableNode VN=new VariableNode(Var1.toString(),Vars_Table.get(Var1.toString()));
         VariableNode VN1=new VariableNode(Var2.toString(),Vars_Table.get(Var2.toString()));
        {if (true) return new BoolExpNode(VN,VN1,Op.image);}
        }
    throw new Error("Missing return statement in function");
  }

 /* Assignment */
  static final public AssignmentNode Assignment1() throws ParseException {
  AssignmentNode AN;
  Token var;
  Token op;
  boolean b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      var = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        op = jj_consume_token(INCR);
        break;
      case DECR:
        op = jj_consume_token(DECR);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                              b=false;
      break;
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        op = jj_consume_token(INCR);
        break;
      case DECR:
        op = jj_consume_token(DECR);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      var = jj_consume_token(IDENTIFIER);
                                             b=true;
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    AN=new AssignmentNode(var.image,null,op.image,b);
    {if (true) return AN;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentNode Assignment() throws ParseException {
  AssignmentNode AN=null;
  Token var;
  Token op;
  ExpNode exp=null;
  boolean bo;
    if (jj_2_18(2147483647)) {
      var = jj_consume_token(IDENTIFIER);
      op = jj_consume_token(ASSIGN_ALL);
      exp = BoExp();
      jj_consume_token(SEMICOLON);
                {if (true) return AN = new AssignmentNode(var.image,null,op.image,true);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
      case IDENTIFIER:
        AN = Assignment1();
        jj_consume_token(SEMICOLON);
         {if (true) return AN;}
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

        /* Section 12.2: Variable statement */
  static final public void VariableStatement() throws ParseException {
    jj_consume_token(VAR);
    VariableDeclarationList();
    if (jj_2_19(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

  static final public void VariableDeclarationList() throws ParseException {
    VariableDeclaration();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      VariableDeclaration();
    }
  }

  static final public void VariableDeclarationListNoIn() throws ParseException {
    VariableDeclarationNoIn();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      VariableDeclarationNoIn();
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 142:
      Initialiser();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
  }

  static final public void VariableDeclarationNoIn() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 142:
      InitialiserNoIn();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

  static final public void Initialiser() throws ParseException {
    jj_consume_token(142);
    AssignmentExpression();
  }

  static final public void InitialiserNoIn() throws ParseException {
    jj_consume_token(142);
    AssignmentExpressionNoIn();
  }

        /* Section 12.3: Empty Statement */
  static final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

        /* Section 12.4: Expression Statement */
  static final public void ExpressionStatement() throws ParseException {
    Expression();
    if (jj_2_20(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

/*1-1-2013 */
/* Section 12.5: The if Statement */
  static final public TreeNode IfStatement() throws ParseException {
        BoolExpNode condition = null;
        IfNode ifNode  = new IfNode();
        BlockNode ifNodeBody = null;
        BlockNode elseNodeBody = null;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    condition = BooleanExpression();
    jj_consume_token(RPAREN);
                        ifNode.addChild(condition);
    ifNodeBody = Block();
                         ifNode.addChild(ifNodeBody);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseNodeBody = Block();
                 ifNode.addChild(elseNodeBody);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
         {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

        /* Section 12.6: While Statements */
  static final public TreeNode WhileStatement() throws ParseException {
        WhileNode whileNode = new WhileNode();
        BoolExpNode condition =null;
        BlockNode whileBody = null;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = BooleanExpression();
                                             whileNode.addChild(condition);
    jj_consume_token(RPAREN);
    whileBody = Block();
                                      whileNode.addChild(whileBody);
    {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

/* ForStatement  */
  static final public ForNode ForStatement() throws ParseException {
        ForNode forNode = new ForNode();
        AssignmentNode assignNode = null;
        BoolExpNode cond1 = null;
        TreeNode cond2 = null ;
        TreeNode forBody = null;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    jj_consume_token(VAR);
    assignNode = Assignment();
    jj_consume_token(SEMICOLON);
    cond1 = BooleanExpression();
    jj_consume_token(SEMICOLON);
    cond2 = Assignment();
    jj_consume_token(RPAREN);
    forBody = Block();
                forNode.addChild(assignNode);
                forNode.addChild(cond1);
                forNode.addChild(cond2);
                forNode.addChild(forBody);
                {if (true) return forNode;}
    throw new Error("Missing return statement in function");
  }

        /* Section 12.7: The continue Statement */
  static final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    if (jj_2_21(2147483647)) {
      Identifier();
    } else {
      ;
    }
    if (jj_2_22(2147483647)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

        /* Section 12.8: The break Statement */
  static final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    if (jj_2_23(2147483647)) {
      Identifier();
    } else {
      ;
    }
    if (jj_2_24(2147483647)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

        /* Section 12.9 The return Statement */
  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    if (jj_2_25(2147483647)) {
      Expression();
    } else {
      ;
    }
    if (jj_2_26(2147483647)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

        /* Section 12.10: The with Statement */
  static final public void WithStatement() throws ParseException {
    jj_consume_token(WITH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

        /* 12.11 The switch Statement */

/*
	void SwitchStatement() :
	{}
	{
		"switch" "(" Expression() ")" CaseBlock()
	}
	

	void CaseBlock()  :
	{}
	{
		"{" ( CaseClauses() )? 
				( 
						"}" | DefaultClause() ( CaseClauses() )? "}" 
				)
	}

	void CaseClauses() :
	{}
	{
		( CaseClause() )+
	}

	void CaseClause()   :
	{}
	{
		(( "case" Expression() ":" )) (Block())?
	}

	void DefaultClause() :
	{}
	{
		(( "default" ":" )) (Block())?
	}
*/

        /* Section 12.12: Labelled Statements */
  static final public void LabelledStatement() throws ParseException {
    Identifier();
    jj_consume_token(COLON);
    Statement();
  }

  static final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    Expression();
    if (jj_2_27(2147483647)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

  static final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      Finally();
      break;
    case CATCH:
      Catch();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        Finally();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Catch() throws ParseException {
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    Identifier();
    jj_consume_token(RPAREN);
    Block();
  }

  static final public void Finally() throws ParseException {
    jj_consume_token(FINALLY);
    Block();
  }

        /* Section 13: Function Definition */
  static final public void FunctionDeclaration() throws ParseException {
    jj_consume_token(FUNCTION);
    Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      FormalParameterList();
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    FunctionBody();
  }

  static final public void FunctionExpression() throws ParseException {
    jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Identifier();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      FormalParameterList();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    FunctionBody();
  }

  static final public void FormalParameterList() throws ParseException {
    Identifier();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      Identifier();
    }
  }

  static final public void FunctionBody() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case IF:
    case INCR:
    case DECR:
    case IDENTIFIER:
      SourceElements();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

        /* Section 14: Program */
  static final public void Program() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case IF:
    case INCR:
    case DECR:
    case IDENTIFIER:
      SourceElements();
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(0);
  }

  static final public void SourceElements() throws ParseException {
    label_32:
    while (true) {
      SourceElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IF:
      case INCR:
      case DECR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_32;
      }
    }
  }

  static final public void SourceElement() throws ParseException {
    if (jj_2_28(2147483647)) {
      FunctionDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INCR:
      case DECR:
      case IDENTIFIER:
        Statement();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

        /*
	 * Grammar for parsing JScript .NET contructs: ( import System; var contents :
	 * String = reader.ReadToEnd(); ) Refer: src/hostenv_jsc.js
	 */
  static final public void ImportStatement() throws ParseException {
    jj_consume_token(IMPORT);
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_33:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
  }

  static final public void JScriptVarStatement() throws ParseException {
    jj_consume_token(VAR);
    JScriptVarDeclarationList();
    if (jj_2_30(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
  }

  static final public void JScriptVarDeclarationList() throws ParseException {
    JScriptVarDeclaration();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_34;
      }
      jj_consume_token(COMMA);
      JScriptVarDeclaration();
    }
  }

  static final public void JScriptVarDeclaration() throws ParseException {
    Identifier();
    jj_consume_token(COLON);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 142:
      Initialiser();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(NUMBERS)) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  static final private boolean jj_3_28() {
    if (jj_3R_44()) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_3R_118()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_3R_44()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_3R_80()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    Token xsp;
    if (jj_3R_76()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(NUMBERS)) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_3R_72()) return true;
    return false;
  }

  static final private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(139)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static final private boolean jj_3_27() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(139)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_73()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3_26() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_3R_94()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_3R_70()) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_101() {
    Token xsp;
    if (jj_3R_110()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_3R_43()) return true;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(96)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_3R_105()) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_3R_113()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_3R_123()) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_3R_130()) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_3R_137()) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_121()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_3R_141()) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_39()) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    Token xsp;
    if (jj_3R_139()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_3R_128()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_3R_142()) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_3R_138()) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN_ALL)) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_107()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_38()) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN_ALL)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_38()) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_118()) return true;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_59()) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_3R_39()) return true;
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public JSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[79];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x20080000,0x0,0x20000000,0x20000000,0x0,0x0,0x80000,0x20080000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20080000,0x20080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x4000000,0x4002000,0x0,0x0,0x0,0x0,0xa0000000,0xa0000000,0xa0000000,0x80000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10080100,0x10080100,0x0,0x10000000,0x12880100,0x0,0x10080100,0x10080100,0x0,0x0,0x2800000,0x12880100,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12880100,0x12880100,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0xc000000,0xc000000,0x0,0x0,0x0,0x200001,0x200001,0x3c060000,0x8,0x0,0x0,0xc000000,0xc000000,0x3c060000,0x3c060000,0x3c060000,0xc0000000,0xc0000000,0x30000000,0x30000000,0x600,0x600,0x1e0,0x1e0,0x1e0,0x1e0,0xc00000,0xc00000,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x1000000,0x1000000,0x80000,0x80000,0x3c060000,0x3c060000,0x4010,0x8,0x8,0x0,0x10000000,0x30000000,0x30000000,0xc0000000,0xc0000000,0x0,0x0,0xc001e0,0xc001e0,0xc001e0,0xc000000,0xc000000,0xc000000,0xc000000,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0xc000000,0xc000000,0xc000000,0xc000000,0x200000,0x8,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x4,0x4,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0x0,0x0,0x0,0x0,0x0,0x80000,0xc0000,0x0,0xc0000,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x800,0x800,0x682,0xe82,0xe82,0x0,0x0,0xe82,0x0,0xe82,0xe82,0x0,0x0,0x0,0xe82,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x3000,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe82,0xe82,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x800,0x0,0x0,0x800,0x800,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x800,0x800,0x800,0x0,0x800,0x800,0x800,0x800,0x0,0x0,0x4000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[30];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public JSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JSParser(JSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[143];
    for (int i = 0; i < 143; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 79; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 143; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
