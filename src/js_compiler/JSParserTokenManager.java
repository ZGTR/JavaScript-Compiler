/* Generated By:JavaCC: Do not edit this line. JSParserTokenManager.java */
package js_compiler;
import java.util.ArrayList;
import js_compiler.JS_COMPILERGrammar .* ;
import java.util.HashMap;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class JSParserTokenManager implements JSParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x810000000c0L) != 0L)
            return 4;
         if ((active0 & 0xf8000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 0;
            return 33;
         }
         if ((active0 & 0xf07ffffc0ffff00L) != 0L || (active1 & 0xfff3f00000000000L) != 0L || (active2 & 0x401L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 0;
            return 86;
         }
         if ((active1 & 0x3e76b003000L) != 0L)
            return 1;
         if ((active1 & 0x400000L) != 0L || (active2 & 0x5000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 0;
            return -1;
         }
         if ((active1 & 0x200000L) != 0L)
            return 15;
         if ((active1 & 0x80004000L) != 0L)
            return 44;
         if ((active1 & 0x18720L) != 0L)
            return 7;
         if ((active0 & 0x3f000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 0;
            return 37;
         }
         return -1;
      case 1:
         if ((active1 & 0x38000003000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x3c80300000L) != 0L)
            return 86;
         if ((active1 & 0x400000L) != 0L || (active2 & 0x1000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x18600L) != 0L)
            return 6;
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active1 & 0x4000L) != 0L)
            return 57;
         if ((active0 & 0xfbfffc37fcfff00L) != 0L || (active1 & 0xfff3f00000000000L) != 0L || (active2 & 0x401L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 86;
         }
         if ((active1 & 0x81000000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active1 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xebffecb6fefff00L) != 0L || (active1 & 0xffc3f00000000000L) != 0L || (active2 & 0x401L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 2;
            }
            return 86;
         }
         if ((active0 & 0x140013010000000L) != 0L || (active1 & 0x30000000000000L) != 0L)
            return 86;
         if ((active2 & 0x1000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x10400L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
            return -1;
         }
         if ((active0 & 0xa08004040405800L) != 0L || (active1 & 0x400000000000L) != 0L || (active2 & 0x400L) != 0L)
            return 86;
         if ((active0 & 0x4b7feab2fafa700L) != 0L || (active1 & 0xffc3b00000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
            return 86;
         }
         return -1;
      case 4:
         if ((active0 & 0x43140000f01a400L) != 0L)
            return 86;
         if ((active0 & 0x86beab20ae0300L) != 0L || (active1 & 0xffc3b00000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return 86;
         }
         return -1;
      case 5:
         if ((active0 & 0xa2b08200280000L) != 0L || (active1 & 0x403a00000000000L) != 0L)
            return 86;
         if ((active0 & 0x40e2924860300L) != 0L || (active1 & 0xfbc0100000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
            return 86;
         }
         return -1;
      case 6:
         if ((active0 & 0x4082920020100L) != 0L || (active1 & 0xfb40000000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
            return 86;
         }
         if ((active0 & 0x60004840200L) != 0L || (active1 & 0x80100000000000L) != 0L)
            return 86;
         return -1;
      case 7:
         if ((active0 & 0x20020100L) != 0L || (active1 & 0x6a40000000000000L) != 0L)
            return 86;
         if ((active0 & 0x4082900000000L) != 0L || (active1 & 0x9100000000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 7;
            return 86;
         }
         return -1;
      case 8:
         if ((active0 & 0x82000000000L) != 0L)
            return 86;
         if ((active0 & 0x4000900000000L) != 0L || (active1 & 0x9100000000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
            return 86;
         }
         return -1;
      case 9:
         if ((active0 & 0x900000000L) != 0L || (active1 & 0x1000000000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 86;
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x8100000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 9;
            return 86;
         }
         return -1;
      case 10:
         if ((active1 & 0x8100000000000000L) != 0L)
            return 86;
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 10;
            return 86;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 81;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L, 0x2000L);
      case 37:
         {
         jjmatchedKind = 99;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 38:
         {
         jjmatchedKind = 96;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc002000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 61);
      case 42:
         {
         jjmatchedKind = 94;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L);
      case 43:
         {
         jjmatchedKind = 92;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000800L, 0x0L);
      case 44:
         return jjStopAtPos(0, 67);
      case 45:
         {
         jjmatchedKind = 93;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8001000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 85, 15);
      case 47:
         {
         jjmatchedKind = 95;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 84);
      case 59:
         return jjStopAtPos(0, 66);
      case 60:
         {
         jjmatchedKind = 70;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x81000000080L, 0x0L);
      case 61:
         {
         jjmatchedKind = 68;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x1000L);
      case 62:
         {
         jjmatchedKind = 69;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18700L, 0x0L);
      case 63:
         return jjStopAtPos(0, 83);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8800000000000000L, 0x1L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 64);
      case 93:
         return jjStopAtPos(0, 65);
      case 94:
         {
         jjmatchedKind = 98;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe00L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3c0000L, 0x200000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x800000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3f000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x10000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f80000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L, 0x3500000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7c00000000000L, 0x20400000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf8000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x300000000000000L, 0x80000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 62);
      case 124:
         {
         jjmatchedKind = 97;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x12001000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 63);
      case 126:
         return jjStopAtPos(0, 82);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 43:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 45:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 60:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 57);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3000L);
      case 62:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18400L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100028000003000L, active1, 0x7580000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x1000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000c0000L, active1, 0x230000000000000L, active2, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 86);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x438400000004000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000007000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8408000L, active1, 0x100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000L, active1, 0x8800000000000000L, active2, 0x1L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200004050230200L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400c0000000400L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x2400000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100020000000L, active1, 0x40200000000000L, active2, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000800L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 68);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(2, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(2, 141);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 62:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000c000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x200000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x800000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400L, active1, 0x100000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x800000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x60a040000000000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x80000000000000L, active2, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004026030000L, active1, 0x8040000000000000L, active2, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x480008000200L, active1, 0x400000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000300000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 86);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 86);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0x3402000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800401100L, active1, 0x4000000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 86);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 86);
         return jjMoveStringLiteralDfa3_0(active0, 0x80020a040802800L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 86);
         break;
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(3, 79);
         break;
      case 61:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(3, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xe040400L, active1, 0x800000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x200000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000020002000L, active1, 0x40000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 86);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 86);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 86);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x81002000880000L, active1, 0x8501000000000000L, active2, 0x1L);
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 86);
         break;
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 86);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x802000000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x400100101000200L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000200000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 86);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 86);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0x7000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2880800020100L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x280000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60800000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 86);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000200L, active1, 0x3080300000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000020000L, active1, 0L, active2, 0L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 86);
         break;
      case 108:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4200000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0xc02000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x202200000100L, active1, 0x8000000000000000L, active2, 0x1L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 86);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 86);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 86);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 86);
         return jjMoveStringLiteralDfa5_0(active0, 0x20080000L, active1, 0x40000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x300L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 86);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 86);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 86);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 86);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 86);
         break;
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x200000000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 86);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x840000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x800020000L, active1, 0x100000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4100000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 86);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 86);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 86);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000100L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 86);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8200000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000020000000L, active1, 0x40000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 86);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 86);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 86);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x800000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 86);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 86);
         return jjMoveStringLiteralDfa8_0(active0, 0x80800000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 86);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 118, 86);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000100000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 86);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 86);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 125, 86);
         break;
      case 121:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 86);
         break;
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 86);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 86);
         break;
      case 104:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 128, 86);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 86);
         break;
      case 116:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 124, 86);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 120, 86);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 127, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(4, 10);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  else if (curChar == 47)
                     jjAddStates(15, 17);
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 38)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 42)
                     jjCheckNAdd(1);
                  else if (curChar == 45)
                     jjCheckNAdd(1);
                  else if (curChar == 61)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAdd(13);
                  }
                  break;
               case 44:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(50, 51);
                  else if (curChar == 47)
                     jjCheckNAddStates(21, 23);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 1:
                  if (curChar == 61 && kind > 68)
                     kind = 68;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
               case 56:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 7:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 38)
                     jjCheckNAdd(1);
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(18, 20);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 23:
                  if (curChar == 34 && kind > 135)
                     kind = 135;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 40:
                  if (curChar != 36)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddStates(0, 3);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 47)
                     jjAddStates(15, 17);
                  break;
               case 45:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 46:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 47:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 48:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 42)
                     jjCheckNAddStates(28, 30);
                  break;
               case 52:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               case 53:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               case 54:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 55:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 14);
                  break;
               case 59:
                  jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 61:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 63:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 64:
                  if (curChar == 39 && kind > 135)
                     kind = 135;
                  break;
               case 65:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 66:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 67:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(4, 10);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 46)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(75);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar != 46)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(81);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(85);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 86:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 124)
                     jjCheckNAdd(1);
                  else if (curChar == 94)
                     jjCheckNAdd(1);
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(31);
                  break;
               case 10:
                  if (curChar == 94)
                     jjCheckNAdd(1);
                  break;
               case 11:
                  if (curChar == 124)
                     jjCheckNAdd(1);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(40, 43);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 28:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 31:
                  if (curChar == 101 && kind > 137)
                     kind = 137;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 115)
                     jjCheckNAdd(31);
                  break;
               case 36:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar != 95)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddStates(0, 3);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddStates(0, 3);
                  break;
               case 45:
                  jjAddStates(21, 23);
                  break;
               case 50:
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  jjCheckNAddTwoStates(53, 51);
                  break;
               case 59:
                  jjAddStates(44, 45);
                  break;
               case 61:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 62:
                  if (curChar == 92)
                     jjAddStates(46, 49);
                  break;
               case 63:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 79:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 23);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(53, 51);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(31, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 41, 42, 73, 74, 76, 77, 82, 83, 42, 59, 61, 62, 64, 44, 
   49, 55, 20, 21, 23, 45, 46, 48, 20, 21, 25, 23, 51, 52, 54, 61, 
   62, 64, 61, 62, 66, 64, 17, 18, 22, 24, 26, 28, 59, 60, 63, 65, 
   67, 69, 80, 81, 84, 85, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\151\145\154\144", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\146\165\156\143\164\151\157\156", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\164\141\164\151\143", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\171", "\164\171\160\145\157\146", "\166\141\162", "\166\157\151\144", 
"\167\150\151\154\145", "\167\151\164\150", "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", null, "\76", "\74", "\74\75", "\76\75", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\76\76\75\40", "\76\76\76\75", "\41", "\176", "\77", 
"\72", "\56", "\75\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\174\174\75", 
"\46\46\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\105\154\145\155\145\156\164", "\116\165\155\142\145\162", "\163\164\157\160", "\145\163\143\141\160\145", 
"\117\142\152\145\143\164", "\123\164\162\151\156\147", null, null, "\147\145\164", "\163\145\164", 
"\106\165\156\143\164\151\157\156", "\166\141\154\165\145\117\146", 
"\160\141\147\145\131\157\146\146\163\145\164", "\144\145\142\165\147\147\145\162", "\160\141\162\145\156\164", 
"\111\156\146\151\156\151\164\171", "\160\141\162\163\145\106\154\157\141\164", 
"\160\141\162\163\145\111\156\164", "\120\141\163\163\167\157\162\144", 
"\111\156\156\145\162\110\145\151\147\150\164", "\111\156\156\145\162\127\151\144\164\150", null, null, null, null, null, null, 
null, null, null, "\156\165\154\154", null, "\75\75\75", "\41\75\75", "\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0x7ea3L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xc0L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[86];
static private final int[] jjstateSet = new int[172];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public JSParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public JSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 139;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 58 :
         break;
      case 59 :
         break;
      case 60 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      case 65 :
         break;
      case 66 :
         break;
      case 67 :
         break;
      case 68 :
         break;
      case 69 :
         break;
      case 70 :
         break;
      case 71 :
         break;
      case 72 :
         break;
      case 73 :
         break;
      case 74 :
         break;
      case 75 :
         break;
      case 76 :
         break;
      case 77 :
         break;
      case 78 :
         break;
      case 79 :
         break;
      case 80 :
         break;
      case 81 :
         break;
      case 82 :
         break;
      case 83 :
         break;
      case 84 :
         break;
      case 85 :
         break;
      case 86 :
         break;
      case 87 :
         break;
      case 88 :
         break;
      case 89 :
         break;
      case 90 :
         break;
      case 91 :
         break;
      case 92 :
         break;
      case 93 :
         break;
      case 94 :
         break;
      case 95 :
         break;
      case 96 :
         break;
      case 97 :
         break;
      case 98 :
         break;
      case 99 :
         break;
      case 100 :
         break;
      case 101 :
         break;
      case 102 :
         break;
      case 103 :
         break;
      case 104 :
         break;
      case 105 :
         break;
      case 106 :
         break;
      case 107 :
         break;
      case 108 :
         break;
      case 109 :
         break;
      case 110 :
         break;
      case 111 :
         break;
      case 112 :
         break;
      case 113 :
         break;
      case 114 :
         break;
      case 115 :
         break;
      case 116 :
         break;
      case 117 :
         break;
      case 118 :
         break;
      case 119 :
         break;
      case 120 :
         break;
      case 121 :
         break;
      case 122 :
         break;
      case 123 :
         break;
      case 124 :
         break;
      case 125 :
         break;
      case 126 :
         break;
      case 127 :
         break;
      case 128 :
         break;
      case 129 :
         break;
      case 133 :
         break;
      case 135 :
         break;
      case 137 :
         break;
      case 138 :
         break;
      case 139 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 140 :
         break;
      case 141 :
         break;
      case 142 :
         break;
      default : 
         break;
   }
}
}
